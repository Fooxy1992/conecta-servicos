// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  name         String
  email        String   @unique
  passwordHash String   @map("password_hash")
  phone        String?
  role         UserRole
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  workerProfile    WorkerProfile?
  clientRequests   ServiceRequest[] @relation("ClientRequests")
  sentMessages     Message[]        @relation("SentMessages")
  receivedMessages Message[]        @relation("ReceivedMessages")
  clientRatings    Rating[]         @relation("ClientRatings")

  @@map("users")
}

model WorkerProfile {
  id           String          @id @default(cuid())
  userId       String          @unique @map("user_id")
  bio          String?
  location     String
  rating       Float           @default(0)
  availability Json?
  createdAt    DateTime        @default(now()) @map("created_at")

  // Relacionamentos
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  categories       WorkerCategory[]
  serviceRequests  ServiceRequest[]
  ratings          Rating[]

  @@map("worker_profiles")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?

  // Relacionamentos
  workers         WorkerCategory[]
  serviceRequests ServiceRequest[]

  @@map("categories")
}

model WorkerCategory {
  id         String @id @default(cuid())
  workerId   String @map("worker_id")
  categoryId String @map("category_id")

  // Relacionamentos
  worker   WorkerProfile @relation(fields: [workerId], references: [id], onDelete: Cascade)
  category Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([workerId, categoryId])
  @@map("worker_categories")
}

model ServiceRequest {
  id          String        @id @default(cuid())
  clientId    String        @map("client_id")
  workerId    String?       @map("worker_id")
  categoryId  String        @map("category_id")
  description String
  status      RequestStatus @default(PENDING)
  scheduledAt DateTime?     @map("scheduled_at")
  createdAt   DateTime      @default(now()) @map("created_at")

  // Relacionamentos
  client   User           @relation("ClientRequests", fields: [clientId], references: [id], onDelete: Cascade)
  worker   WorkerProfile? @relation(fields: [workerId], references: [id], onDelete: SetNull)
  category Category       @relation(fields: [categoryId], references: [id])
  rating   Rating?
  messages Message[]

  @@map("service_requests")
}

model Rating {
  id        String   @id @default(cuid())
  serviceId String   @unique @map("service_id")
  clientId  String   @map("client_id")
  workerId  String   @map("worker_id")
  rating    Int
  comment   String?
  createdAt DateTime @default(now()) @map("created_at")

  // Relacionamentos
  service ServiceRequest @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  client  User           @relation("ClientRatings", fields: [clientId], references: [id], onDelete: Cascade)
  worker  WorkerProfile  @relation(fields: [workerId], references: [id], onDelete: Cascade)

  @@map("ratings")
}

model Message {
  id         String   @id @default(cuid())
  senderId   String   @map("sender_id")
  receiverId String   @map("receiver_id")
  content    String
  sentAt     DateTime @default(now()) @map("sent_at")
  serviceId  String?  @map("service_id")

  // Relacionamentos
  sender  User            @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User           @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  service ServiceRequest? @relation(fields: [serviceId], references: [id], onDelete: SetNull)

  @@map("messages")
}

enum UserRole {
  CLIENT
  WORKER
}

enum RequestStatus {
  PENDING
  ACCEPTED
  DONE
  CANCELLED
} 